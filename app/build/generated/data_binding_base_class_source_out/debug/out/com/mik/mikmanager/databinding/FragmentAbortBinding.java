// Generated by view binder compiler. Do not edit!
package com.mik.mikmanager.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.mik.mikmanager.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentAbortBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView txtData;

  @NonNull
  public final TextView txtTitle1;

  @NonNull
  public final TextView txtTitle2;

  @NonNull
  public final TextView txtTitle3;

  @NonNull
  public final TextView txtTitle4;

  @NonNull
  public final TextView txtUrl1;

  @NonNull
  public final TextView txtUrl2;

  @NonNull
  public final TextView txtUrl3;

  private FragmentAbortBinding(@NonNull ConstraintLayout rootView, @NonNull TextView txtData,
      @NonNull TextView txtTitle1, @NonNull TextView txtTitle2, @NonNull TextView txtTitle3,
      @NonNull TextView txtTitle4, @NonNull TextView txtUrl1, @NonNull TextView txtUrl2,
      @NonNull TextView txtUrl3) {
    this.rootView = rootView;
    this.txtData = txtData;
    this.txtTitle1 = txtTitle1;
    this.txtTitle2 = txtTitle2;
    this.txtTitle3 = txtTitle3;
    this.txtTitle4 = txtTitle4;
    this.txtUrl1 = txtUrl1;
    this.txtUrl2 = txtUrl2;
    this.txtUrl3 = txtUrl3;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentAbortBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentAbortBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_abort, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentAbortBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.txtData;
      TextView txtData = rootView.findViewById(id);
      if (txtData == null) {
        break missingId;
      }

      id = R.id.txtTitle1;
      TextView txtTitle1 = rootView.findViewById(id);
      if (txtTitle1 == null) {
        break missingId;
      }

      id = R.id.txtTitle2;
      TextView txtTitle2 = rootView.findViewById(id);
      if (txtTitle2 == null) {
        break missingId;
      }

      id = R.id.txtTitle3;
      TextView txtTitle3 = rootView.findViewById(id);
      if (txtTitle3 == null) {
        break missingId;
      }

      id = R.id.txtTitle4;
      TextView txtTitle4 = rootView.findViewById(id);
      if (txtTitle4 == null) {
        break missingId;
      }

      id = R.id.txtUrl1;
      TextView txtUrl1 = rootView.findViewById(id);
      if (txtUrl1 == null) {
        break missingId;
      }

      id = R.id.txtUrl2;
      TextView txtUrl2 = rootView.findViewById(id);
      if (txtUrl2 == null) {
        break missingId;
      }

      id = R.id.txtUrl3;
      TextView txtUrl3 = rootView.findViewById(id);
      if (txtUrl3 == null) {
        break missingId;
      }

      return new FragmentAbortBinding((ConstraintLayout) rootView, txtData, txtTitle1, txtTitle2,
          txtTitle3, txtTitle4, txtUrl1, txtUrl2, txtUrl3);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
