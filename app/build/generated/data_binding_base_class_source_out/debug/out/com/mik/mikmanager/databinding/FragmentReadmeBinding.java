// Generated by view binder compiler. Do not edit!
package com.mik.mikmanager.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.mik.mikmanager.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentReadmeBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView txtData1;

  @NonNull
  public final TextView txtData2;

  @NonNull
  public final TextView txtData3;

  @NonNull
  public final TextView txtTitle1;

  @NonNull
  public final TextView txtTitle2;

  private FragmentReadmeBinding(@NonNull ConstraintLayout rootView, @NonNull TextView txtData1,
      @NonNull TextView txtData2, @NonNull TextView txtData3, @NonNull TextView txtTitle1,
      @NonNull TextView txtTitle2) {
    this.rootView = rootView;
    this.txtData1 = txtData1;
    this.txtData2 = txtData2;
    this.txtData3 = txtData3;
    this.txtTitle1 = txtTitle1;
    this.txtTitle2 = txtTitle2;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentReadmeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentReadmeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_readme, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentReadmeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.txtData1;
      TextView txtData1 = rootView.findViewById(id);
      if (txtData1 == null) {
        break missingId;
      }

      id = R.id.txtData2;
      TextView txtData2 = rootView.findViewById(id);
      if (txtData2 == null) {
        break missingId;
      }

      id = R.id.txtData3;
      TextView txtData3 = rootView.findViewById(id);
      if (txtData3 == null) {
        break missingId;
      }

      id = R.id.txtTitle1;
      TextView txtTitle1 = rootView.findViewById(id);
      if (txtTitle1 == null) {
        break missingId;
      }

      id = R.id.txtTitle2;
      TextView txtTitle2 = rootView.findViewById(id);
      if (txtTitle2 == null) {
        break missingId;
      }

      return new FragmentReadmeBinding((ConstraintLayout) rootView, txtData1, txtData2, txtData3,
          txtTitle1, txtTitle2);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
