// Generated by view binder compiler. Do not edit!
package com.mik.mikmanager.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.Switch;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.mik.mikmanager.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentDumpBinding implements ViewBinding {
  @NonNull
  private final FrameLayout rootView;

  @NonNull
  public final Button btnSelectWhitePath;

  @NonNull
  public final Switch swDeep;

  @NonNull
  public final Switch swTuoke;

  @NonNull
  public final EditText txtBreakClass;

  @NonNull
  public final EditText txtWhiteClass;

  @NonNull
  public final EditText txtWhitePath;

  private FragmentDumpBinding(@NonNull FrameLayout rootView, @NonNull Button btnSelectWhitePath,
      @NonNull Switch swDeep, @NonNull Switch swTuoke, @NonNull EditText txtBreakClass,
      @NonNull EditText txtWhiteClass, @NonNull EditText txtWhitePath) {
    this.rootView = rootView;
    this.btnSelectWhitePath = btnSelectWhitePath;
    this.swDeep = swDeep;
    this.swTuoke = swTuoke;
    this.txtBreakClass = txtBreakClass;
    this.txtWhiteClass = txtWhiteClass;
    this.txtWhitePath = txtWhitePath;
  }

  @Override
  @NonNull
  public FrameLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentDumpBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentDumpBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_dump, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentDumpBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnSelectWhitePath;
      Button btnSelectWhitePath = rootView.findViewById(id);
      if (btnSelectWhitePath == null) {
        break missingId;
      }

      id = R.id.swDeep;
      Switch swDeep = rootView.findViewById(id);
      if (swDeep == null) {
        break missingId;
      }

      id = R.id.swTuoke;
      Switch swTuoke = rootView.findViewById(id);
      if (swTuoke == null) {
        break missingId;
      }

      id = R.id.txtBreakClass;
      EditText txtBreakClass = rootView.findViewById(id);
      if (txtBreakClass == null) {
        break missingId;
      }

      id = R.id.txtWhiteClass;
      EditText txtWhiteClass = rootView.findViewById(id);
      if (txtWhiteClass == null) {
        break missingId;
      }

      id = R.id.txtWhitePath;
      EditText txtWhitePath = rootView.findViewById(id);
      if (txtWhitePath == null) {
        break missingId;
      }

      return new FragmentDumpBinding((FrameLayout) rootView, btnSelectWhitePath, swDeep, swTuoke,
          txtBreakClass, txtWhiteClass, txtWhitePath);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
